{
  "address": "0x1d533481cCD1402f83Df3D9Ba7496B5e5b602875",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        }
      ],
      "name": "Dispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "MetaEvidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        }
      ],
      "name": "changeMetaEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfRulingOptions",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRuled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfRulingOptions",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "externalIDtoLocalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8aa2be214f3b38f9dbcbe8a9fc174e0c69b7a15d0707b81e0768983ed393383",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x1d533481cCD1402f83Df3D9Ba7496B5e5b602875",
    "transactionIndex": 1,
    "gasUsed": "1850542",
    "logsBloom": "0x
    "blockHash": "0x1fb8c2679d5685c48e1eda4b88d67d7c63cc7f3f3f31978cd5ea0ed31945f55b",
    "transactionHash": "0xc8aa2be214f3b38f9dbcbe8a9fc174e0c69b7a15d0707b81e0768983ed393383",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25952519,
        "transactionHash": "0xc8aa2be214f3b38f9dbcbe8a9fc174e0c69b7a15d0707b81e0768983ed393383",
        "address": "0x1d533481cCD1402f83Df3D9Ba7496B5e5b602875",
        "topics": [
          "0x61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005c68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f697066732f6261666b7265696674656d65367475736e6a77797a616a6b37356679767a646d747979637863746637796866696a6236726669677a336e346c767100000000",
        "logIndex": 0,
        "blockHash": "0x1fb8c2679d5685c48e1eda4b88d67d7c63cc7f3f3f31978cd5ea0ed31945f55b"
      }
    ],
    "blockNumber": 25952519,
    "cumulativeGasUsed": "1850542",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA429667Abb1A6c530BAd1083df4C69FBce86D696",
    "https://cloudflare-ipfs.com/ipfs/bafkreifteme6tusnjwyzajk75fyvzdmtyycxctf7yhfijb6rfigz3n4lvq"
  ],
  "numDeployments": 2,
  "solcInputHash": "a0fd93b0a63a7dd2eb7130435673e092",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"name\":\"changeMetaEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfRulingOptions\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRuled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfRulingOptions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalIDtoLocalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Dispute(address,uint256,uint256,uint256)\":{\"details\":\"To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\",\"params\":{\"_arbitrator\":\"The arbitrator of the contract.\",\"_disputeID\":\"ID of the dispute in the Arbitrator contract.\",\"_evidenceGroupID\":\"Unique identifier of the evidence group that is linked to this dispute.\",\"_metaEvidenceID\":\"Unique identifier of meta-evidence.\"}},\"MetaEvidence(uint256,string)\":{\"details\":\"To be emitted when meta-evidence is submitted.\",\"params\":{\"_evidence\":\"IPFS path to metaevidence, example: '/ipfs/Qmarwkf7C9RuzDEJNnarT3WZ7kem5bk8DZAzx78acJjMFH/metaevidence.json'\",\"_metaEvidenceID\":\"Unique identifier of meta-evidence.\"}},\"Ruling(address,uint256,uint256)\":{\"details\":\"To be raised when a ruling is given.\",\"params\":{\"_arbitrator\":\"The arbitrator giving the ruling.\",\"_disputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_ruling\":\"The ruling which was given.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_arbitrator\":\"The arbitrator to rule on created disputes.\",\"_metaEvidence\":\"The URI of the meta evidence object for evidence submissions requests.\"}},\"createDispute(uint256,bytes,uint256)\":{\"details\":\"Calls createDispute function of the specified arbitrator to create a dispute. Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\",\"params\":{\"_arbitratorExtraData\":\"Extra data for the arbitrator.\",\"_evidenceGroupID\":\"Unique identifier of the evidence group that is linked to this dispute.\",\"_numberOfRulingOptions\":\"Number of ruling options. Must be greater than 1, otherwise there is nothing to choose from.\"},\"returns\":{\"disputeID\":\"Dispute id (on arbitrator side) of the dispute created.\"}},\"rule(uint256,uint256)\":{\"details\":\"To be called by the arbitrator of the dispute, to declare the winning ruling.\",\"params\":{\"_externalDisputeID\":\"ID of the dispute in arbitrator contract.\",\"_ruling\":\"The ruling choice of the arbitration.\"}}},\"title\":\"ArbitrableExampleEthFee An example of an arbitrable contract which connects to the arbitator that implements the updated interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/arbitration/arbitrables/ArbitrableExampleEthFee.sol\":\"ArbitrableExampleEthFee\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/arbitration/IArbitrable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/// @title IArbitrable\\n/// Arbitrable interface. Note that this interface follows the ERC-792 standard.\\n/// When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\ninterface IArbitrable {\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Give a ruling for a dispute.\\n    ///      Must be called by the arbitrator.\\n    ///      The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator.\\n    /// Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x4ec003982915e2edd1ae9d16c0707ef74c8377dca12045931443f35b51c9fdf4\",\"license\":\"MIT\"},\"src/arbitration/IArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/// @title Arbitrator\\n/// Arbitrator interface that implements the new arbitration standard.\\n/// Unlike the ERC-792 this standard is not concerned with appeals, so each arbitrator can implement an appeal system that suits it the most.\\n/// When developing arbitrator contracts we need to:\\n/// - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n/// - Define the functions for cost display (arbitrationCost).\\n/// - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\ninterface IArbitrator {\\n    /// @dev To be emitted when a dispute is created.\\n    /// @param _disputeID The identifier of the dispute.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrable indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Create a dispute.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _choices Amount of choices the arbitrator can make in this dispute.\\n    /// @param _extraData Can be used to give additional info on the dispute to be created.\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /// @dev Compute the cost of arbitration.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Can be used to give additional info on the dispute to be created.\\n    /// @return cost Required cost of arbitration.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0xbeaf15d06e440105702c724c1a491474a08d1a6c0fc38f98014fbb2ace49cb3d\",\"license\":\"MIT\"},\"src/arbitration/arbitrables/ArbitrableExampleEthFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../IArbitrable.sol\\\";\\nimport \\\"../../evidence/IMetaEvidence.sol\\\";\\n\\n/// @title ArbitrableExampleEthFee\\n/// An example of an arbitrable contract which connects to the arbitator that implements the updated interface.\\ncontract ArbitrableExampleEthFee is IArbitrable, IMetaEvidence {\\n    struct DisputeStruct {\\n        bool isRuled; // Whether the dispute has been ruled or not.\\n        uint256 ruling; // Ruling given by the arbitrator.\\n        uint256 numberOfRulingOptions; // The number of choices the arbitrator can give.\\n    }\\n\\n    uint256 META_EVIDENCE_ID = 0;\\n    address public governor;\\n    IArbitrator public immutable arbitrator; // Arbitrator is set in constructor and never changed.\\n    mapping(uint256 => uint256) public externalIDtoLocalID; // Maps external (arbitrator side) dispute IDs to local dispute IDs.\\n    DisputeStruct[] public disputes; // Stores the disputes' info. disputes[disputeID].\\n\\n    /// @dev Constructor\\n    /// @param _arbitrator The arbitrator to rule on created disputes.\\n    /// @param _metaEvidence The URI of the meta evidence object for evidence submissions requests.\\n    constructor(IArbitrator _arbitrator, string memory _metaEvidence) {\\n        governor = msg.sender;\\n        arbitrator = _arbitrator;\\n        emit MetaEvidence(META_EVIDENCE_ID, _metaEvidence);\\n    }\\n\\n    /// @dev Calls createDispute function of the specified arbitrator to create a dispute.\\n    /// Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\\n    /// @param _numberOfRulingOptions Number of ruling options. Must be greater than 1, otherwise there is nothing to choose from.\\n    /// @param _arbitratorExtraData Extra data for the arbitrator.\\n    /// @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n    /// @return disputeID Dispute id (on arbitrator side) of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfRulingOptions,\\n        bytes calldata _arbitratorExtraData,\\n        uint256 _evidenceGroupID\\n    ) external payable returns (uint256 disputeID) {\\n        require(_numberOfRulingOptions > 1, \\\"Incorrect number of choices\\\");\\n\\n        uint256 localDisputeID = disputes.length;\\n        disputes.push(DisputeStruct({isRuled: false, ruling: 0, numberOfRulingOptions: _numberOfRulingOptions}));\\n\\n        disputeID = arbitrator.createDispute{value: msg.value}(_numberOfRulingOptions, _arbitratorExtraData);\\n\\n        externalIDtoLocalID[disputeID] = localDisputeID;\\n\\n        emit Dispute(arbitrator, disputeID, META_EVIDENCE_ID, _evidenceGroupID);\\n    }\\n\\n    /// @dev To be called by the arbitrator of the dispute, to declare the winning ruling.\\n    /// @param _externalDisputeID ID of the dispute in arbitrator contract.\\n    /// @param _ruling The ruling choice of the arbitration.\\n    function rule(uint256 _externalDisputeID, uint256 _ruling) external override {\\n        uint256 localDisputeID = externalIDtoLocalID[_externalDisputeID];\\n        DisputeStruct storage dispute = disputes[localDisputeID];\\n        require(msg.sender == address(arbitrator), \\\"Only the arbitrator can execute this.\\\");\\n        require(_ruling <= dispute.numberOfRulingOptions, \\\"Invalid ruling.\\\");\\n        require(dispute.isRuled == false, \\\"This dispute has been ruled already.\\\");\\n\\n        dispute.isRuled = true;\\n        dispute.ruling = _ruling;\\n\\n        emit Ruling(IArbitrator(msg.sender), _externalDisputeID, dispute.ruling);\\n    }\\n\\n    function changeMetaEvidence(string memory _metaEvidence) external {\\n        require(msg.sender == governor, \\\"Not authorized: governor only.\\\");\\n        emit MetaEvidence(++META_EVIDENCE_ID, _metaEvidence);\\n    }\\n}\\n\",\"keccak256\":\"0x7705a6f08df531826662dfc0eee78e5c5b27fc58ee782c1585f3c8ba316a0d65\",\"license\":\"MIT\"},\"src/evidence/IMetaEvidence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../arbitration/IArbitrator.sol\\\";\\n\\n/// @title IMetaEvidence\\n/// ERC-1497: Evidence Standard excluding evidence emission as it will be handled by the arbitrator.\\ninterface IMetaEvidence {\\n    /// @dev To be emitted when meta-evidence is submitted.\\n    /// @param _metaEvidenceID Unique identifier of meta-evidence.\\n    /// @param _evidence IPFS path to metaevidence, example: '/ipfs/Qmarwkf7C9RuzDEJNnarT3WZ7kem5bk8DZAzx78acJjMFH/metaevidence.json'\\n    event MetaEvidence(uint256 indexed _metaEvidenceID, string _evidence);\\n\\n    /// @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _disputeID ID of the dispute in the Arbitrator contract.\\n    /// @param _metaEvidenceID Unique identifier of meta-evidence.\\n    /// @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n    event Dispute(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _disputeID,\\n        uint256 _metaEvidenceID,\\n        uint256 _evidenceGroupID\\n    );\\n}\\n\",\"keccak256\":\"0x4d985d8a86445a9556917c495b14c4074e33f4495e3674bb23b4448296579de7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000805534801561001457600080fd5b50604051610aee380380610aee833981016040819052610033916100ce565b600180546001600160a01b031916331790556001600160a01b0382166080526000546040517f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d9061008590849061019c565b60405180910390a250506101cf565b634e487b7160e01b600052604160045260246000fd5b60005b838110156100c55781810151838201526020016100ad565b50506000910152565b600080604083850312156100e157600080fd5b82516001600160a01b03811681146100f857600080fd5b60208401519092506001600160401b038082111561011557600080fd5b818501915085601f83011261012957600080fd5b81518181111561013b5761013b610094565b604051601f8201601f19908116603f0116810190838211818310171561016357610163610094565b8160405282815288602084870101111561017c57600080fd5b61018d8360208301602088016100aa565b80955050505050509250929050565b60208152600082518060208401526101bb8160408501602087016100aa565b601f01601f19169190910160400192915050565b6080516108ef6101ff60003960008181610134015281816101db015281816104a8015261055601526108ef6000f3fe6080604052600436106100605760003560e01c80630c340a2414610065578063311a6c56146100a2578063564a565d146100c45780636137048c146101015780636cc6cde1146101225780639076527914610156578063c21ae06114610176575b600080fd5b34801561007157600080fd5b50600154610085906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ae57600080fd5b506100c26100bd36600461065b565b6101a3565b005b3480156100d057600080fd5b506100e46100df36600461067d565b610360565b604080519315158452602084019290925290820152606001610099565b61011461010f366004610696565b610397565b604051908152602001610099565b34801561012e57600080fd5b506100857f000000000000000000000000000000000000000000000000000000000000000081565b34801561016257600080fd5b506100c261017136600461072e565b6105b3565b34801561018257600080fd5b5061011461019136600461067d565b60026020526000908152604090205481565b60008281526002602052604081205460038054919291839081106101c9576101c96107df565b906000526020600020906003020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161461026d5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465206044820152643a3434b99760d91b60648201526084015b60405180910390fd5b80600201548311156102b35760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b6044820152606401610264565b805460ff16156103115760405162461bcd60e51b8152602060048201526024808201527f54686973206469737075746520686173206265656e2072756c656420616c726560448201526330b23c9760e11b6064820152608401610264565b805460ff1916600190811782558101839055604051838152849033907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769060200160405180910390a350505050565b6003818154811061037057600080fd5b600091825260209091206003909102018054600182015460029092015460ff909116925083565b6000600185116103e95760405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374206e756d626572206f662063686f6963657300000000006044820152606401610264565b60038054604080516060810182526000808252602082018181528284018b81526001860187559186905291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b958502958601805460ff191691151591909117905590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c850155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d90930192909255905163c13517e160e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c13517e19034906104eb908a908a908a906004016107f5565b60206040518083038185885af1158015610509573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061052e919061082b565b60008181526002602090815260408083208590559154825190815290810186905291935083917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316917f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d910160405180910390a350949350505050565b6001546001600160a01b0316331461060d5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420617574686f72697a65643a20676f7665726e6f72206f6e6c792e00006044820152606401610264565b600080815461061b90610844565b9190508190557f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d82604051610650919061086b565b60405180910390a250565b6000806040838503121561066e57600080fd5b50508035926020909101359150565b60006020828403121561068f57600080fd5b5035919050565b600080600080606085870312156106ac57600080fd5b84359350602085013567ffffffffffffffff808211156106cb57600080fd5b818701915087601f8301126106df57600080fd5b8135818111156106ee57600080fd5b88602082850101111561070057600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561074057600080fd5b813567ffffffffffffffff8082111561075857600080fd5b818401915084601f83011261076c57600080fd5b81358181111561077e5761077e610718565b604051601f8201601f19908116603f011681019083821181831017156107a6576107a6610718565b816040528281528760208487010111156107bf57600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60006020828403121561083d57600080fd5b5051919050565b60006001820161086457634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208083528351808285015260005b818110156108985785810183015185820160400152820161087c565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220d3dc968361b8c36f41216ffd1c18e2fef63596b44ac0c9a060ac5bd9e018ad2964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100605760003560e01c80630c340a2414610065578063311a6c56146100a2578063564a565d146100c45780636137048c146101015780636cc6cde1146101225780639076527914610156578063c21ae06114610176575b600080fd5b34801561007157600080fd5b50600154610085906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ae57600080fd5b506100c26100bd36600461065b565b6101a3565b005b3480156100d057600080fd5b506100e46100df36600461067d565b610360565b604080519315158452602084019290925290820152606001610099565b61011461010f366004610696565b610397565b604051908152602001610099565b34801561012e57600080fd5b506100857f000000000000000000000000000000000000000000000000000000000000000081565b34801561016257600080fd5b506100c261017136600461072e565b6105b3565b34801561018257600080fd5b5061011461019136600461067d565b60026020526000908152604090205481565b60008281526002602052604081205460038054919291839081106101c9576101c96107df565b906000526020600020906003020190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03161461026d5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465206044820152643a3434b99760d91b60648201526084015b60405180910390fd5b80600201548311156102b35760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b6044820152606401610264565b805460ff16156103115760405162461bcd60e51b8152602060048201526024808201527f54686973206469737075746520686173206265656e2072756c656420616c726560448201526330b23c9760e11b6064820152608401610264565b805460ff1916600190811782558101839055604051838152849033907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769060200160405180910390a350505050565b6003818154811061037057600080fd5b600091825260209091206003909102018054600182015460029092015460ff909116925083565b6000600185116103e95760405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374206e756d626572206f662063686f6963657300000000006044820152606401610264565b60038054604080516060810182526000808252602082018181528284018b81526001860187559186905291517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b958502958601805460ff191691151591909117905590517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c850155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d90930192909255905163c13517e160e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c13517e19034906104eb908a908a908a906004016107f5565b60206040518083038185885af1158015610509573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061052e919061082b565b60008181526002602090815260408083208590559154825190815290810186905291935083917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316917f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d910160405180910390a350949350505050565b6001546001600160a01b0316331461060d5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420617574686f72697a65643a20676f7665726e6f72206f6e6c792e00006044820152606401610264565b600080815461061b90610844565b9190508190557f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d82604051610650919061086b565b60405180910390a250565b6000806040838503121561066e57600080fd5b50508035926020909101359150565b60006020828403121561068f57600080fd5b5035919050565b600080600080606085870312156106ac57600080fd5b84359350602085013567ffffffffffffffff808211156106cb57600080fd5b818701915087601f8301126106df57600080fd5b8135818111156106ee57600080fd5b88602082850101111561070057600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561074057600080fd5b813567ffffffffffffffff8082111561075857600080fd5b818401915084601f83011261076c57600080fd5b81358181111561077e5761077e610718565b604051601f8201601f19908116603f011681019083821181831017156107a6576107a6610718565b816040528281528760208487010111156107bf57600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60006020828403121561083d57600080fd5b5051919050565b60006001820161086457634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208083528351808285015260005b818110156108985785810183015185820160400152820161087c565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220d3dc968361b8c36f41216ffd1c18e2fef63596b44ac0c9a060ac5bd9e018ad2964736f6c63430008120033",
  "devdoc": {
    "events": {
      "Dispute(address,uint256,uint256,uint256)": {
        "details": "To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.",
        "params": {
          "_arbitrator": "The arbitrator of the contract.",
          "_disputeID": "ID of the dispute in the Arbitrator contract.",
          "_evidenceGroupID": "Unique identifier of the evidence group that is linked to this dispute.",
          "_metaEvidenceID": "Unique identifier of meta-evidence."
        }
      },
      "MetaEvidence(uint256,string)": {
        "details": "To be emitted when meta-evidence is submitted.",
        "params": {
          "_evidence": "IPFS path to metaevidence, example: '/ipfs/Qmarwkf7C9RuzDEJNnarT3WZ7kem5bk8DZAzx78acJjMFH/metaevidence.json'",
          "_metaEvidenceID": "Unique identifier of meta-evidence."
        }
      },
      "Ruling(address,uint256,uint256)": {
        "details": "To be raised when a ruling is given.",
        "params": {
          "_arbitrator": "The arbitrator giving the ruling.",
          "_disputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_ruling": "The ruling which was given."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor",
        "params": {
          "_arbitrator": "The arbitrator to rule on created disputes.",
          "_metaEvidence": "The URI of the meta evidence object for evidence submissions requests."
        }
      },
      "createDispute(uint256,bytes,uint256)": {
        "details": "Calls createDispute function of the specified arbitrator to create a dispute. Note that we don’t need to check that msg.value is enough to pay arbitration fees as it’s the responsibility of the arbitrator contract.",
        "params": {
          "_arbitratorExtraData": "Extra data for the arbitrator.",
          "_evidenceGroupID": "Unique identifier of the evidence group that is linked to this dispute.",
          "_numberOfRulingOptions": "Number of ruling options. Must be greater than 1, otherwise there is nothing to choose from."
        },
        "returns": {
          "disputeID": "Dispute id (on arbitrator side) of the dispute created."
        }
      },
      "rule(uint256,uint256)": {
        "details": "To be called by the arbitrator of the dispute, to declare the winning ruling.",
        "params": {
          "_externalDisputeID": "ID of the dispute in arbitrator contract.",
          "_ruling": "The ruling choice of the arbitration."
        }
      }
    },
    "title": "ArbitrableExampleEthFee An example of an arbitrable contract which connects to the arbitator that implements the updated interface.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9480,
        "contract": "src/arbitration/arbitrables/ArbitrableExampleEthFee.sol:ArbitrableExampleEthFee",
        "label": "META_EVIDENCE_ID",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9482,
        "contract": "src/arbitration/arbitrables/ArbitrableExampleEthFee.sol:ArbitrableExampleEthFee",
        "label": "governor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9489,
        "contract": "src/arbitration/arbitrables/ArbitrableExampleEthFee.sol:ArbitrableExampleEthFee",
        "label": "externalIDtoLocalID",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9493,
        "contract": "src/arbitration/arbitrables/ArbitrableExampleEthFee.sol:ArbitrableExampleEthFee",
        "label": "disputes",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(DisputeStruct)9477_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DisputeStruct)9477_storage)dyn_storage": {
        "base": "t_struct(DisputeStruct)9477_storage",
        "encoding": "dynamic_array",
        "label": "struct ArbitrableExampleEthFee.DisputeStruct[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DisputeStruct)9477_storage": {
        "encoding": "inplace",
        "label": "struct ArbitrableExampleEthFee.DisputeStruct",
        "members": [
          {
            "astId": 9472,
            "contract": "src/arbitration/arbitrables/ArbitrableExampleEthFee.sol:ArbitrableExampleEthFee",
            "label": "isRuled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9474,
            "contract": "src/arbitration/arbitrables/ArbitrableExampleEthFee.sol:ArbitrableExampleEthFee",
            "label": "ruling",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9476,
            "contract": "src/arbitration/arbitrables/ArbitrableExampleEthFee.sol:ArbitrableExampleEthFee",
            "label": "numberOfRulingOptions",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
